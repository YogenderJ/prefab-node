image: node:latest


stages:
    - build
#    - test
#    - sonar
    - artifact
    - deploy


variables:
    KEY_NAME: "$CI_PIPELINE_IID.zip"
    BUCKET_NAME: "$CI_PROJECT_NAME-artifact" 
    BUCKET_DEPLOY_NAME: "$CI_PROJECT_NAME"
    APPLICATION_NAME: "$CI_PROJECT_NAME"
    #DEPLOYMENTGROUP_NAME: "DG-$CI_PROJECT_NAME-$CI_COMMIT_BRANCH"


workflow:
    rules:
        - if: $CI_COMMIT_REF_NAME == "main"
          variables: 
              DEPLOYMENTGROUP_NAME: "DG-$CI_PROJECT_NAME"
        - if: $CI_COMMIT_REF_NAME != "main"
          variables: 
              DEPLOYMENTGROUP_NAME: "DG-$CI_PROJECT_NAME-$CI_COMMIT_BRANCH"
              



build:
    tags:
        - shell  
    stage: build
    script:
        - npm install
        #- npm run build
    artifacts:
        paths:
            - ./
    only:
        - main
        - dev
 
#test:
#    tags:
#        - shell
#    stage: test
#    script:
#        - ${CI_PROJECT_DIR}/vendor/bin/phpunit --verbose -c phpunit.xml.dist
#    artifacts:
#        paths:
#            - ./
    
#sonar:
#    tags:
#        - shell
#    image: sonarsource/sonar-scanner-cli
#    stage: sonar
#    cache:
#        key: "${CI_JOB_NAME}"
#        paths:
#            - .sonar/cache
#    script:
#        - sonar-scanner -Dsonar.host.url="${SONAR_HOST_URL}" -Dsonar.token="${SONAR_TOKEN}"
#    artifacts:
#        paths:
#            - ./
  
build_artifact:
    tags:
        - shell
    stage: artifact
    script:
        - echo '----Build Artifact---'
        - ls
        - zip -r $KEY_NAME * -x ".git"
        ##- zip -r $KEY_NAME build/*
        #- aws configure set AWS_ACCESS_KEY_ID $AWS_ACCESS_KEY_ID
        #- aws configure set AWS_SECRET_ACCESS_KEY $AWS_SECRET_ACCESS_KEY
        #- aws configure set AWS_DEFAULT_REGION $AWS_DEFAULT_REGION
        ##- aws s3 cp $KEY_NAME s3://$BUCKET_NAME/$REPO_NAME/
        - aws s3 cp $KEY_NAME s3://$BUCKET_NAME/
    artifacts:
        paths:
            - ./*.zip
    only:
        - main
        - dev 


deploy:
    tags:
        - shell  
    stage: deploy
    script:
        - echo "--Deploy stage--"
        - aws deploy create-deployment --application-name $APPLICATION_NAME --deployment-group-name $DEPLOYMENTGROUP_NAME --deployment-config-name CodeDeployDefault.AllAtOnce --s3-location bucket=$BUCKET_NAME,bundleType=zip,key=$KEY_NAME

        - codedeploy_deployment_details=$(aws deploy create-deployment --application-name $APPLICATION_NAME --deployment-group-name $DEPLOYMENTGROUP_NAME --deployment-config-name CodeDeployDefault.AllAtOnce --s3-location bucket=$BUCKET_NAME,bundleType=zip,key=$KEY_NAME)
        - codedeploy_deployment_ID=$(echo $codedeploy_deployment_details| awk '{print $3}')
        - deployment_ID=$(echo -n "$codedeploy_deployment_ID" | tail -c +2 | head -c -1)
        - aws deploy wait deployment-successful --deployment-id $deployment_ID
        - echo $codedeploy_deployment_ID
    #only:
    #    - main
    #    - dev
    rules:
         - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "dev"'
           when: manual
         - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
           when: always